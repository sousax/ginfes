{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { program } from 'commander'\nimport fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport { download } from './download'\n\nconst DEFAULT_OUTPUT_FOLDER = './notas-fiscais'\nconst DEFAULT_BATCH_AMOUNT = 500\n\nprogram\n  .name('ginfes')\n  .description('Um programa para facilitar o download de diversas notas fiscais dentro do sistema do Ginfes. Caso o programa não funcione da maneira esperada, certifique-se que a sua máquina atende os requisitos mínimos descritos no arquivo README.md')\n  .version('1.0.0')\n\nprogram.command('download')\n  .description('Baixa todas as notas fiscais disponíveis dentro da planilha.')\n  .requiredOption('-f, --file <file>', 'O diretório da planilha a ser usada como base.')\n  .requiredOption('-u, --user <user>', 'O usuário usado para fazer o login.')\n  .requiredOption('-p, --password <password>', 'A senha usada para fazer o login.')\n  .option('-s, --sheet <sheet>', 'O nome da planilha a ser usada como base.')\n  .option('-a, --amount <amount>', 'A quantidade máxima de notas fiscais baixadas por requisição.', String(DEFAULT_BATCH_AMOUNT))\n  .option('-o, --output <output>', 'A pasta que todas as notas fiscais serão salvas.', DEFAULT_OUTPUT_FOLDER)\n  .option('--headless <headless>', 'Se o navegador deve ser aberto em modo headless.', true)\n  .action(async (options) => {\n    const baseDir = process.cwd()\n\n    // Transforma os caminhos relativos em absolutos e converte a quantidade de notas fiscais para um número.\n    options.amount = Number(options.amount)\n    options.file = path.resolve(baseDir, options.file)\n    options.output = path.resolve(baseDir, options.output)\n    options.headless = options.headless === 'true'\n    options.sheet = options.sheet ?? undefined\n    options.user = options.user ?? undefined\n    options.password = options.password ?? undefined\n\n    // Certifica que a pasta de output existe.\n    await fs.mkdir(options.output, { recursive: true })\n\n    // Certifica que a planilha existe.\n    await fs.access(options.file)\n\n    // Inicia o processo de download.\n    await download(options)\n  })\n\nprogram.parse()\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAAS,eAAe;AACxB,OAAO,QAAQ;AACf,OAAO,UAAU;AAEjB,SAAS,gBAAgB;AAEzB,MAAM,wBAAwB;AAC9B,MAAM,uBAAuB;AAE7B,QACG,KAAK,QAAQ,EACb,YAAY,qPAA4O,EACxP,QAAQ,OAAO;AAElB,QAAQ,QAAQ,UAAU,EACvB,YAAY,iEAA8D,EAC1E,eAAe,qBAAqB,mDAAgD,EACpF,eAAe,qBAAqB,wCAAqC,EACzE,eAAe,6BAA6B,mCAAmC,EAC/E,OAAO,uBAAuB,2CAA2C,EACzE,OAAO,yBAAyB,0EAAiE,OAAO,oBAAoB,CAAC,EAC7H,OAAO,yBAAyB,uDAAoD,qBAAqB,EACzG,OAAO,yBAAyB,oDAAoD,IAAI,EACxF,OAAO,CAAO,YAAY;AAvB7B;AAwBI,QAAM,UAAU,QAAQ,IAAI;AAG5B,UAAQ,SAAS,OAAO,QAAQ,MAAM;AACtC,UAAQ,OAAO,KAAK,QAAQ,SAAS,QAAQ,IAAI;AACjD,UAAQ,SAAS,KAAK,QAAQ,SAAS,QAAQ,MAAM;AACrD,UAAQ,WAAW,QAAQ,aAAa;AACxC,UAAQ,SAAQ,aAAQ,UAAR,YAAiB;AACjC,UAAQ,QAAO,aAAQ,SAAR,YAAgB;AAC/B,UAAQ,YAAW,aAAQ,aAAR,YAAoB;AAGvC,QAAM,GAAG,MAAM,QAAQ,QAAQ,EAAE,WAAW,KAAK,CAAC;AAGlD,QAAM,GAAG,OAAO,QAAQ,IAAI;AAG5B,QAAM,SAAS,OAAO;AACxB,EAAC;AAEH,QAAQ,MAAM;","names":[]}